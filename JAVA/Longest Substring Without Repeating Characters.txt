1.

public class Solution {
    public int lengthOfLongestSubstring(String s) {
      int n = s.length(), res = 0;
      Map<Character, Integer> map = new HashMap<>();
      for(int i=0, j=0; j < n; j++) {
        if(map.containsKey(s.charAt(j))) {
            i = Math.max(i, map.get(s.charAt(j)));
        }
        res = Math.max(res, j-i+1);  
        map.put(s.charAt(j),j+1);  
          
      }
        return res;
    }
}

51ms time complexity O(n) / space complexity O(min(m,n))


2. Ascii

public class Solution {
    public int lengthOfLongestSubstring(String s) {
      int n = s.length(), ans = 0;
      int[] index = new int[128];
      for(int j=0, i=0; j < n; j++) {
        i = Math.max(index[s.charAt(j)], i);
        ans = Math.max(ans, j-i+1);
        index[s.charAt(j)] = j+1;
      }
      return ans;
    }
}

37ms time complexity O(n) / space complexity O(m) m=size of the charset